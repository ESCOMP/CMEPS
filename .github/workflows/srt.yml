# CIME scripts regression tests

name: scripts regression tests

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.10.9 ]
    env:
      CC: mpicc
      FC: mpifort
      CXX: mpicxx
      CPPFLAGS: "-I/usr/include -I/usr/local/include "
      LDFLAGS: "-L/usr/lib/x86_64-linux-gnu -lnetcdf -lnetcdff -lpnetcdf"     
      # Versions of all dependencies can be updated here
      ESMF_VERSION: v8.5.0
      PARALLELIO_VERSION: pio2_6_0
      CIME_MODEL: cesm
      CIME_DRIVER: nuopc
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it

      - name: Setup Ubuntu Environment
        id: load-env
        run: |
          set -x
          sudo apt-get update 
          sudo apt-get install libxml2-utils
          sudo apt-get install netcdf-bin 
          sudo apt-get install libnetcdf-dev
          sudo apt-get install libnetcdff-dev
          sudo apt-get install pnetcdf-bin
          sudo apt-get install libpnetcdf-dev
          sudo apt-get install doxygen
          sudo apt-get install graphviz
          sudo apt-get install wget
          sudo apt-get install gfortran
          sudo apt-get install libjpeg-dev
          sudo apt-get install libz-dev
          sudo apt-get install openmpi-bin
          sudo apt-get install libopenmpi-dev

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - run: echo "PyYAML" > requirements.txt
      - name: Install PyYAML
        run: pip install -r requirements.txt
      # use the latest cesm main
      - name: cesm checkout
        uses: actions/checkout@v3
        with:
          repository: ESCOMP/CESM
          path: cesm
      # this cmeps commit
      - name: cmeps checkout
        uses: actions/checkout@v3
        with:
          path: cesm/components/cmeps
          
      # Checkout cesm datamodels and support
      # cpl7 is needed - i think that's a bug
      - name: checkout externals
        run: |
          pushd cesm
          ./manage_externals/checkout_externals ccs_config cdeps cime share mct cpl7 parallelio
          
      - name: Cache ESMF
        id: cache-esmf
        uses: actions/cache@v3
        with:
          path: ~/ESMF
          key: ${{ runner.os }}-${{ env.ESMF_VERSION }}-ESMF1
      # - name: cache pnetcdf
      #   id: cache-pnetcdf
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/pnetcdf
      #     key: ${{ runner.os }}-${{ env.PNETCDF_VERSION}}-pnetcdf

      # - name: Cache netcdf-fortran
      #   id: cache-netcdf-fortran
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/netcdf-fortran
      #     key: ${{ runner.os }}-${{ env.NETCDF_FORTRAN_VERSION }}-netcdf-fortran

      - name: Cache ParallelIO
        id: cache-ParallelIO
        uses: actions/cache@v3
        with:
          path: ~/pio
          key: ${{ runner.os }}-${{ env.PARALLELIO_VERSION }}.parallelio
      - name: Cache inputdata
        id: cache-inputdata
        uses: actions/cache@v3
        with:
          path: $HOME/cesm/inputdata
          key: inputdata
      # - name: Build PNetCDF
      #   if: steps.cache-pnetcdf.outputs.cache-hit != 'true'
      #   uses: ESCOMP/CDEPS/.github/actions/buildpnetcdf@e06246b560d3132170bb1a5443fa3d65dfbd2040
      #   with:
      #     pnetcdf_version: ${{ env.PNETCDF_VERSION }}
      #     install_prefix: $HOME/pnetcdf
      # - name: Build NetCDF Fortran
      #   if: steps.cache-netcdf-fortran.outputs.cache-hit != 'true'
      #   uses: ESCOMP/CDEPS/.github/actions/buildnetcdff@e06246b560d3132170bb1a5443fa3d65dfbd2040
      #   with:
      #     netcdf_fortran_version: ${{ env.NETCDF_FORTRAN_VERSION }}
      #     install_prefix: $HOME/netcdf-fortran
      #     netcdf_c_path: /usr
      - name: Build ParallelIO
        if: steps.cache-PARALLELIO.outputs.cache-hit != 'true'
        uses: NCAR/ParallelIO/.github/actions/parallelio_cmake@05173a6556ea8d80eb34e3881a5014ea8f4b7543
        with:
          parallelio_version: ${{ env.ParallelIO_VERSION }}
          enable_fortran: True
          install_prefix: /home/runner/pio
          
      - name: Build ESMF
        if: steps.cache-esmf.outputs.cache-hit != 'true'
        uses: ESCOMP/CDEPS/.github/actions/buildesmf@e06246b560d3132170bb1a5443fa3d65dfbd2040
        with:
          esmf_version: ${{ env.ESMF_VERSION }}
          esmf_bopt: g
          esmf_comm: openmpi
          install_prefix: ~/ESMF
          netcdf_c_path: /usr
          netcdf_fortran_path: /usr
          pnetcdf_path: /usr
          parallelio_path: ~/pio


      - name: PREP for scripts regression test
        run: |
          mkdir -p $HOME/cesm/scratch
          mkdir -p $HOME/cesm/inputdata
          pushd $GITHUB_WORKSPACE/cesm/cime/CIME/tests
          export SRCROOT=$GITHUB_WORKSPACE/cesm/
          export CIME_TEST_PLATFORM=ubuntu-latest
          export PIO_INCDIR=$HOME/pio/include
          export PIO_LIBDIR=$HOME/pio/lib
          export PIO_VERSION_MAJOR=2
          export PIO_TYPENAME_VALID_VALUES="netcdf,pnetcdf"
          export NETCDF_PATH=/usr
          export PNETCDF_PATH=/usr
          export LD_LIBRARY_PATH=/usr/lib/libx86_64-linux-gnu/:$LD_LIBRARY_PATH
          export ESMFMKFILE=$HOME/ESMF/lib/libg/Linux.gfortran.64.openmpi.default/esmf.mk
          cat <<EOF >> $GITHUB_WORKSPACE/cesm/ccs_config/machines/cmake_macros/ubuntu-latest.cmake
          set(NetCDF_Fortran_INCLUDE_DIR /usr/include)
          set(NetCDF_Fortran_LIBRARY /usr/lib/x86_64-gnu-Linux/libnetcdff.so)
          EOF
          printenv >> $GITHUB_ENV
          popd
      - name: scripts regression tests
        run: |
          pushd $GITHUB_WORKSPACE/cesm/cime/CIME/tests
          ./scripts_regression_tests.py  --no-fortran-run --compiler gnu --mpilib openmpi --machine ubuntu-latest 
          popd
#     the following can be used by developers to login to the github server in case of errors
#     see https://github.com/marketplace/actions/debugging-with-tmate for further details
      - name: Setup tmate session
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3
