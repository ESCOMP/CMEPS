# CIME scripts regression tests

name: scripts regression tests

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push
#  :
#    branches:  main 
#  pull_request:
#    branches:  main 

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        mpich: [4.0.1]
        hdf5: [1.12]
        netcdfc: [4.8.1]
        netcdff: [4.5.4]
        pnetcdf: [1.12.3]
    env:
      CC: mpicc
      FC: mpifort
      CXX: mpicxx
      CPPFLAGS: "-I/usr/include -I/usr/local/parallel/include"
      # Versions of all dependencies can be updated here
      PARALLELIO_VERSION: pio2_5_6
      ESMF_VERSION: jedwards/pio_update2
      CIME_MODEL: cesm
    container:
      image: jedwards4b/m${{ matrix.mpich }}h${{ matrix.hdf5 }}nc${{ matrix.netcdfc }}nf${{ matrix.netcdff }}p${{ matrix.pnetcdf }}

  # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: cime checkout
        uses: actions/checkout@v3
        with:
          repository: ESMCI/cime

      - name: share checkout
        uses: actions/checkout@v3
        with:
          repository: ESCOMP/CESM_share
          path: share

      - name: cpl7 checkout
        uses: actions/checkout@v3
        with:
          repository: ESCOMP/CESM_CPL7andDataComps
          path: components/cpl7

      - name: mct checkout
        uses: actions/checkout@v3
        with:
          repository MCSclimate/MCT
          path: libraries/mct

      - name: parallelio checkout
        uses: actions/checkout@v3
        with:
          repository NCAR/ParallelIO
          path: libraries/parallelio

      - name: Cache inputdata
        id: cache-inputdata
        uses: actions/cache@v2
        with:
          path: $HOME/cesm/inputdata
          key: inputdata

      - name: Checkout ESMF
        uses: actions/checkout@v3
        with:
          repository: esmf-org/esmf
          ref: ${{ env.ESMF_VERSION }}
          path: ESMF

      - id: cache-esmf
        uses: actions/cache@v2
        with:
          path: esmf
          key: ${{ runner.os }}-${{ env.ESMF_VERSION }}-ESMF
      - name: build ESMF
        if: steps.cache-esmf.outputs.cache-hit != 'true'
        env:
          ESMF_COMPILER: gfortran
          ESMF_BOPT: g
          ESMF_PIO: external
          ESMF_PIO_INCLUDE: ${GITHUB_WORKSPACE}/pio/include
          ESMF_PIO_LIBPATH: ${GITHUB_WORKSPACE}/pio/lib
          ESMF_NETCDF: nc-config
          ESMF_PNETCDF: pnetcdf-config
          ESMF_COMM: openmpi
          ESMF_INSTALL_PREFIX: esmf
        run: |
          cd ESMF
          export ESMF_DIR=`pwd`
          echo $ESMF_DIR
          make -j 2
          make install
#
#      The following can be used to ssh to the testnode for debugging
#      see https://github.com/mxschmitt/action-tmate for details
#      - name: Setup tmate session
#        uses: mxschmitt/action-tmate@v3

      - name: scripts regression tests
        run: |
          mkdir -p ${HOME}/cesm/scratch
          mkdir -p ${HOME}/cesm/inputdata
          cd ${HOME}/work/CESM_share/CESM_share/scripts/tests
          ls -l $HOME/work/CESM_share/CESM_share
          export NETCDF=/usr/local/parallel
          export PATH=$NETCDF/bin:$PATH
          export LD_LIBRARY_PATH=$NETCDF/lib:$HOME/pnetcdf/lib:$LD_LIBRARY_PATH
          ./scripts_regression_tests.py  --no-fortran-run --compiler gnu --mpilib mpich --machine ubuntu-latest

#     the following can be used by developers to login to the github server in case of errors
#     see https://github.com/marketplace/actions/debugging-with-tmate for further details
#      - name: Setup tmate session
#        if: ${{ failure() }}
#        uses: mxschmitt/action-tmate@v3
